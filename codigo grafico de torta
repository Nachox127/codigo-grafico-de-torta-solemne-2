import pandas as pd
import matplotlib.pyplot as plt
import csv

# Cargar el archivo CSV con el delimitador correcto
try:
    df = pd.read_csv('AlarmasSistema.csv', delimiter=';', on_bad_lines='skip', quoting=csv.QUOTE_NONE, skip_blank_lines=True, encoding='utf-8')
    print("Archivo cargado exitosamente.")
except Exception as e:
    print(f"Error al cargar el archivo: {e}")

# Continuar con el análisis solo si el archivo se cargó correctamente
if 'df' in locals():
    # Verificar y limpiar los nombres de las columnas
    df.columns = df.columns.str.strip().str.lower()  # Elimina espacios y convierte a minúsculas
    print("Nombres de las columnas:", df.columns)

    # Asegurar que las columnas de fecha/hora estén en formato datetime
    if 'alarm_time' in df.columns and 'cancel_time' in df.columns:
        df['alarm_time'] = pd.to_datetime(df['alarm_time'], errors='coerce')  # Convertir a datetime
        df['cancel_time'] = pd.to_datetime(df['cancel_time'], errors='coerce')  # Manejar errores en formato de fecha

        # Calcular la duración en minutos, evitando NaNs
        df['duracion'] = (df['cancel_time'] - df['alarm_time']).dt.total_seconds() / 60
        df['duracion'] = df['duracion'].fillna(0)  # Llenar con ceros si hay valores faltantes

        # ===============================
        # Gráfico de Torta: Proporción de alarmas por severidad (al inicio)
        if 'severity' in df.columns:
            df['severity'].value_counts().plot(kind='pie', autopct='%1.1f%%', title='Proporción de alarmas por severidad')
            plt.ylabel('')  # Ocultar la etiqueta del eje y
            plt.show()

        # ===============================
        # 1. Distribución de Alarmas por Severidad
        # ===============================
        # Cantidad de alarmas por severidad
        if 'severity' in df.columns:
            # Convertir severidad a numérico, forzando NaN en caso de error
            df['severity'] = pd.to_numeric(df['severity'], errors='coerce')
            severidad_count = df['severity'].value_counts()
            print(severidad_count)

            # Severidad más frecuente
            severidad_mas_frecuente = severidad_count.idxmax()
            print(f'Severidad más frecuente: {severidad_mas_frecuente}')

            # Promedio y desviación estándar de la severidad
            promedio_severidad = df['severity'].mean()
            desviacion_severidad = df['severity'].std()
            print(f'Promedio de severidad: {promedio_severidad}, Desviación estándar: {desviacion_severidad}')

            # Top 5 elementos con más alarmas por severidad
            if 'name' in df.columns:
                top_5_elementos = df.groupby('name')['severity'].count().nlargest(5)
                print(top_5_elementos)

        # ===============================
        # 2. Duración de las Alarmas
        # ===============================
        # Duración promedio de las alarmas
        duracion_promedio = df['duracion'].mean()
        print(f'Duración promedio de las alarmas: {duracion_promedio} minutos')

        # Alarmas con mayor y menor duración
        mayor_duracion = df.loc[df['duracion'].idxmax()]
        menor_duracion = df.loc[df['duracion'].idxmin()]
        print(f'Alarma con mayor duración:\n {mayor_duracion}')
        print(f'Alarma con menor duración:\n {menor_duracion}')

        # ===============================
        # 3. Análisis Temporal de Alarmas
        # ===============================
        # Crear columna de hora para análisis temporal
        df['hora'] = df['alarm_time'].dt.hour

        # Cantidad de alarmas por hora
        alarmas_por_hora = df.groupby('hora')['severity'].count()
        alarmas_por_hora.plot(kind='line', title='Cantidad de alarmas por hora')
        plt.xlabel('Hora del día')
        plt.ylabel('Cantidad de alarmas')
        plt.show()

        # Comparación del comportamiento temporal por severidad
        df.groupby(['hora', 'severity'])['severity'].count().unstack().plot(kind='line')
        plt.title('Comportamiento temporal por severidad')
        plt.xlabel('Hora del día')
        plt.ylabel('Cantidad de alarmas')
        plt.show()

        # ===============================
        # 4. Análisis de Tipos de Alarmas
        # ===============================
        # Tipos más comunes (columna TEXT)
        if 'text' in df.columns:
            tipos_comunes = df['text'].value_counts().head(5)
            print(tipos_comunes)

            # Comparación de distribución de tipos en relación con severidad (ajuste)
            # Mostrar solo los 10 tipos de alarmas más comunes para evitar congestión en el gráfico
            top_10_tipos = df['text'].value_counts().head(10).index
            df_top = df[df['text'].isin(top_10_tipos)]

            # Ajuste del gráfico para mejorar la visibilidad de los datos
            plt.figure(figsize=(14, 7))  # Aumentar tamaño del gráfico
            ax = df_top.groupby(['text', 'severity'])['severity'].count().unstack().plot(kind='bar', stacked=True, ax=plt.gca())
            plt.title('Distribución de tipos de alarmas según severidad (Top 10)')
            plt.xlabel('Tipo de Alarma')
            plt.ylabel('Cantidad de alarmas')
            plt.xticks(rotation=45, ha='right')
            plt.legend(title='Severidad', bbox_to_anchor=(1.05, 1), loc='upper left')

            # Añadir etiquetas dentro de las barras con un umbral mínimo para evitar etiquetas solapadas o demasiado pequeñas
            for p in ax.patches:
                width, height = p.get_width(), p.get_height()
                x, y = p.get_xy()
                if height > 0:  # Verifica que la altura sea positiva
                    ax.text(x + width / 2,
                            y + height / 2,
                            '{:.0f}'.format(height) if height >= 1 else '',  # Si la altura es menor que 1, no se mostrará
                            horizontalalignment='center',
                            verticalalignment='center',
                            fontsize=8, color='black')  # Cambiar a color negro para mejor contraste

            plt.tight_layout()
            plt.show()

        # ===============================
        # 5. Análisis de Subsistemas
        # ===============================
        # Cantidad de alarmas por subsistema
        if 'dn' in df.columns:
            alarmas_por_subsistema = df['dn'].value_counts()
            print(alarmas_por_subsistema)

            # Relación de nombres de alarmas con subsistemas
            if 'name' in df.columns:
                df.groupby('name')['dn'].value_counts().unstack().plot(kind='bar', stacked=True)
                plt.title('Relación de alarmas con subsistemas')
                plt.xlabel('Nombre de Alarma')
                plt.ylabel('Cantidad de alarmas')
                plt.show()

        # ===============================
        # Gráficos adicionales
        # ===============================
        # Gráfico de Barras: Distribución de alarmas por severidad
        df['severity'].value_counts().plot(kind='bar', title='Distribución de alarmas por severidad')
        plt.xlabel('Severidad')
        plt.ylabel('Cantidad de alarmas')
        plt.show()

        # Gráfico de Barras: Frecuencia de tipos de alarmas (columna TEXT)
        df['text'].value_counts().head(10).plot(kind='bar', title='Tipos de alarmas más comunes')
        plt.xlabel('Tipo de Alarma')
        plt.ylabel('Cantidad de alarmas')
        plt.show()

        # Gráfico de Líneas: Evolución de la cantidad de alarmas a lo largo del día
        df['fecha'] = df['alarm_time'].dt.date
        alarmas_por_dia = df.groupby('fecha')['severity'].count()
        alarmas_por_dia.plot(kind='line', title='Evolución de alarmas a lo largo del día')
        plt.xlabel('Fecha')
        plt.ylabel('Cantidad de alarmas')
        plt.show()

        # Gráfico de Dispersión: Relación entre duración y severidad
        df.plot.scatter(x='duracion', y='severity', title='Relación entre duración y severidad')
        plt.xlabel('Duración (minutos)')
        plt.ylabel('Severidad')
        plt.show()

        # Histogramas: Distribución de la severidad
        df['severity'].plot(kind='hist', title='Distribución de la severidad de alarmas')
        plt.xlabel('Severidad')
        plt.ylabel('Frecuencia')
        plt.show()

        # Histogramas: Distribución de la duración de las alarmas
        df['duracion'].plot(kind='hist', title='Distribución de la duración de las alarmas')
        plt.xlabel('Duración (minutos)')
        plt.ylabel
